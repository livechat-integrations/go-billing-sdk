// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCharge = `-- name: CreateCharge :exec
INSERT INTO charges(id, type, payload, lc_organization_id, created_at)
VALUES ($1, $2, $3, $4, NOW())
`

type CreateChargeParams struct {
	ID               string
	Type             string
	Payload          []byte
	LcOrganizationID string
}

func (q *Queries) CreateCharge(ctx context.Context, arg CreateChargeParams) error {
	_, err := q.db.Exec(ctx, createCharge,
		arg.ID,
		arg.Type,
		arg.Payload,
		arg.LcOrganizationID,
	)
	return err
}

const createSubscription = `-- name: CreateSubscription :exec
INSERT INTO subscriptions(id, lc_organization_id, plan_name, charge_id, created_at)
VALUES ($1, $2, $3, $4, NOW())
`

type CreateSubscriptionParams struct {
	ID               string
	LcOrganizationID string
	PlanName         string
	ChargeID         pgtype.Text
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) error {
	_, err := q.db.Exec(ctx, createSubscription,
		arg.ID,
		arg.LcOrganizationID,
		arg.PlanName,
		arg.ChargeID,
	)
	return err
}

const getChargeByID = `-- name: GetChargeByID :one
SELECT id, lc_organization_id, type, payload, created_at, deleted_at
FROM charges
WHERE id = $1
`

func (q *Queries) GetChargeByID(ctx context.Context, id string) (Charge, error) {
	row := q.db.QueryRow(ctx, getChargeByID, id)
	var i Charge
	err := row.Scan(
		&i.ID,
		&i.LcOrganizationID,
		&i.Type,
		&i.Payload,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getChargeByOrganizationID = `-- name: GetChargeByOrganizationID :one
SELECT id, lc_organization_id, type, payload, created_at, deleted_at
FROM charges
WHERE lc_organization_id = $1
`

func (q *Queries) GetChargeByOrganizationID(ctx context.Context, lcOrganizationID string) (Charge, error) {
	row := q.db.QueryRow(ctx, getChargeByOrganizationID, lcOrganizationID)
	var i Charge
	err := row.Scan(
		&i.ID,
		&i.LcOrganizationID,
		&i.Type,
		&i.Payload,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getSubscriptionByOrganizationID = `-- name: GetSubscriptionByOrganizationID :one
SELECT s.id, s.lc_organization_id, plan_name, charge_id, s.created_at, s.deleted_at, c.id, c.lc_organization_id, type, payload, c.created_at, c.deleted_at
FROM subscriptions s
LEFT JOIN charges c on s.charge_id = c.id
WHERE s.lc_organization_id = $1
`

type GetSubscriptionByOrganizationIDRow struct {
	ID                 string
	LcOrganizationID   string
	PlanName           string
	ChargeID           pgtype.Text
	CreatedAt          pgtype.Timestamptz
	DeletedAt          pgtype.Timestamptz
	ID_2               pgtype.Text
	LcOrganizationID_2 pgtype.Text
	Type               pgtype.Text
	Payload            []byte
	CreatedAt_2        pgtype.Timestamptz
	DeletedAt_2        pgtype.Timestamptz
}

func (q *Queries) GetSubscriptionByOrganizationID(ctx context.Context, lcOrganizationID string) (GetSubscriptionByOrganizationIDRow, error) {
	row := q.db.QueryRow(ctx, getSubscriptionByOrganizationID, lcOrganizationID)
	var i GetSubscriptionByOrganizationIDRow
	err := row.Scan(
		&i.ID,
		&i.LcOrganizationID,
		&i.PlanName,
		&i.ChargeID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.ID_2,
		&i.LcOrganizationID_2,
		&i.Type,
		&i.Payload,
		&i.CreatedAt_2,
		&i.DeletedAt_2,
	)
	return i, err
}

const updateCharge = `-- name: UpdateCharge :exec
UPDATE charges
SET payload = $2
WHERE id = $1
`

type UpdateChargeParams struct {
	ID      string
	Payload []byte
}

func (q *Queries) UpdateCharge(ctx context.Context, arg UpdateChargeParams) error {
	_, err := q.db.Exec(ctx, updateCharge, arg.ID, arg.Payload)
	return err
}
